buildscript {
    ext {
        grpcVersion = "1.20.0"
        protocVersion = "3.7.1"
        lombokVersion = "1.16.20"
        grpcStarterVersion = "2.4.0.RELEASE"
        springBootVersion =  "2.1.6.RELEASE"
        protobufGradlePluginVersion = "0.8.9"
        gradleDownloadTaskVersion = "4.0.0"
        protosVersion = "1.3.2"
        protobufConverterVersion = "1.1.5"
        pgvVersion = "0.2.0"
    }
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePluginVersion}"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("de.undercouch:gradle-download-task:${gradleDownloadTaskVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'de.undercouch.download'


dependencies {
    // use grpc server only
    // https://github.com/yidongnan/grpc-spring-boot-starter#usage
    compile "net.devh:grpc-server-spring-boot-starter:${grpcStarterVersion}"
    compile('org.springframework.security:spring-security-config')
    compile "org.postgresql:postgresql"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    compile ("com.github.BAData:protobuf-converter:${protobufConverterVersion}"){
        exclude(group: "com.google.protobuf", module: "protobuf-java")
    }

    compile "io.envoyproxy.protoc-gen-validate:pgv-java-stub:${pgvVersion}"
    compile "io.envoyproxy.protoc-gen-validate:pgv-java-grpc:${pgvVersion}"

    // 配置protobuf的文件位置
    protobuf files("./protos-tmp/package/")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")

    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompile "junit:junit:4.12"
    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        javapgv {
            artifact = "io.envoyproxy.protoc-gen-validate:protoc-gen-validate:${pgvVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            javapgv {
                option "lang=java"
            }
            grpc {}
        }
    }
}

afterEvaluate {
    extractIncludeProto.dependsOn unTar
}


task downloadFile(type: Download) {
    if (!new File("./protos-tmp").exists()){
        new File("./protos-tmp").mkdir()
    }
    src "http://product.beidougx.com.cn/nexus/content/repositories/npm-all/protos/-/protos-${protosVersion}.tgz"
    dest './protos-tmp'
    overwrite false
}

task unTar (type: Copy, dependsOn: downloadFile) {
    //dependsOn allprojects.findResults { it.tasks.findByName('downloadFile') }
    from tarTree(resources.gzip("./protos-tmp/protos-${protosVersion}.tgz"))
    into './protos-tmp'
    duplicatesStrategy 'exclude'
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
        sourceDirs += file("build/resources/main")
    }
}

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion") }
}
